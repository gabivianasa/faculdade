
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$rose-palette,
      tertiary: mat.$red-palette,
    ),
    typography: Roboto,
    density: 0,
  ));
}

body {
  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);

  // Reset the user agent margin.
  margin: 0;
}
/* You can add global styles to this file, and also import other style files */

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

// bootstrap-core.scss

// 1️⃣ Container
.container {
  width: 100%;
  padding-right: 1rem;
  padding-left: 1rem;
  margin-right: auto;
  margin-left: auto;
  height: calc(100vh - 112px);
  overflow-y: auto;

  @media (min-width: 576px) { max-width: 540px; }
  @media (min-width: 768px) { max-width: 720px; }
  @media (min-width: 992px) { max-width: 960px; }
  @media (min-width: 1200px) { max-width: 1140px; }
  @media (min-width: 1400px) { max-width: 1320px; }
}

// 2️⃣ Display
.d-none { display: none !important; }
.d-inline { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-block { display: block !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }

// 3️⃣ Flex utilities
.flex-row { flex-direction: row !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column { flex-direction: column !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-fill { flex: 1 1 auto !important; }

.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.justify-content-evenly { justify-content: space-evenly !important; }

.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

.align-self-auto { align-self: auto !important; }
.align-self-start { align-self: flex-start !important; }
.align-self-end { align-self: flex-end !important; }
.align-self-center { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch { align-self: stretch !important; }

// 4️⃣ Spacing (margins & paddings)
$spacer: 1rem;
$scale: 0 1 2 3 4 5;

@mixin generate-spacing($prefix, $prop) {
  @each $i in $scale {
    .#{$prefix}-#{$i} { #{$prop}: $i * 0.25rem !important; }
  }
  .#{$prefix}-auto { #{$prop}: auto !important; }
}

// Margins
@include generate-spacing('m', 'margin');
@include generate-spacing('mt', 'margin-top');
@include generate-spacing('mb', 'margin-bottom');
@include generate-spacing('ml', 'margin-left');
@include generate-spacing('mr', 'margin-right');

// Padding
@include generate-spacing('p', 'padding');
@include generate-spacing('pt', 'padding-top');
@include generate-spacing('pb', 'padding-bottom');
@include generate-spacing('pl', 'padding-left');
@include generate-spacing('pr', 'padding-right');

// Combinados (horizontal / vertical)
@each $i in $scale {
  .mx-#{$i} { margin-left: $i * 0.25rem !important; margin-right: $i * 0.25rem !important; }
  .my-#{$i} { margin-top: $i * 0.25rem !important; margin-bottom: $i * 0.25rem !important; }
  .px-#{$i} { padding-left: $i * 0.25rem !important; padding-right: $i * 0.25rem !important; }
  .py-#{$i} { padding-top: $i * 0.25rem !important; padding-bottom: $i * 0.25rem !important; }
}

// Auto para combinados
.mx-auto { margin-left: auto !important; margin-right: auto !important; }
.my-auto { margin-top: auto !important; margin-bottom: auto !important; }
.px-auto { padding-left: auto !important; padding-right: auto !important; }
.py-auto { padding-top: auto !important; padding-bottom: auto !important; }

// 5️⃣ Width / Height helpers
.w-100 { width: 100% !important; }
.h-100 { height: 100% !important; }
.vw-100 { height: 100vw !important; }
.vh-100 { height: 100vh !important; }

// Text alignment
.text-start { text-align: left !important; }
.text-center { text-align: center !important; }
.text-end { text-align: right !important; }
.text-decoration-none {text-decoration: none !important; }

// Font weight
.fw-light { font-weight: 300 !important; }
.fw-normal { font-weight: 400 !important; }
.fw-bold { font-weight: 700 !important; }

// Font style
.fst-italic { font-style: italic !important; }
.fst-normal { font-style: normal !important; }

// Text transformation
.text-lowercase { text-transform: lowercase !important; }
.text-uppercase { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Font size (pequeno conjunto, pode expandir)
.fs-1 { font-size: 2.5rem !important; }
.fs-2 { font-size: 2rem !important; }
.fs-3 { font-size: 1.75rem !important; }
.fs-4 { font-size: 1.5rem !important; }
.fs-5 { font-size: 1.25rem !important; }
.fs-6 { font-size: 1rem !important; }

// Text truncation
.text-truncate {
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
}

// Line height
.lh-1 { line-height: 1 !important; }
.lh-sm { line-height: 1.25 !important; }
.lh-base { line-height: 1.5 !important; }
.lh-lg { line-height: 2 !important; }

.primary-color { color: #ba005c !important; }
.primary-bg { background-color: #ffd9e1 !important; }
.sangue {color: #990000 !important; }


// ---------------------------
// CONFIGURAÇÕES GERAIS
// ---------------------------

// Número total de colunas no grid
$grid-columns: 12;

// Gutter (espaçamento horizontal entre colunas)
$grid-gutter-width: 1.5rem;

// Breakpoints responsivos (iguais ao Bootstrap 5)
$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// ---------------------------
// MIXINS
// ---------------------------

// Cria colunas responsivas (col-md-1 ... col-md-12)
@mixin make-grid-columns($breakpoint, $width) {
  @for $i from 1 through $grid-columns {
    .col-#{$breakpoint}-#{$i} {
      flex: 0 0 auto;
      width: calc(($i / $grid-columns) * 100%);
    }
  }

  .col-#{$breakpoint} {
    flex: 1 0 0%;
  }
}

// ---------------------------
// BASE DAS CLASSES
// ---------------------------

// Classe base para a linha
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc($grid-gutter-width / -2);
  margin-left: calc($grid-gutter-width / -2);
}

.row > [class^="col"],
.row > [class*=" col-"] {
  padding-right: calc($grid-gutter-width / 2);
  padding-left: calc($grid-gutter-width / 2);
}

// Coluna flexível padrão (sem número)
.col {
  flex: 1 0 0%;
}

// ---------------------------
// COLUNAS FIXAS GLOBAIS (ex: .col-1 ... .col-12)
// ---------------------------
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 auto;
    width: calc(($i / $grid-columns) * 100%);
  }
}

// ---------------------------
// COLUNAS RESPONSIVAS (ex: .col-md-1 ...)
// ---------------------------
@each $breakpoint, $width in $grid-breakpoints {
  @media (min-width: $width) {
    @include make-grid-columns($breakpoint, $width);
  }
}